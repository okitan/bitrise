/**
 * Bitrise API
 * Official REST API for Bitrise.io
 *
 * The version of the OpenAPI document: 0.1
 * Contact: letsconnect@bitrise.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import localVarRequest = require('request');
import http = require('http');

/* tslint:disable:no-unused-locals */
import { ServiceStandardErrorRespModel } from '../model/serviceStandardErrorRespModel';
import { V0WebhookDeliveryItemResponseModel } from '../model/v0WebhookDeliveryItemResponseModel';
import { V0WebhookDeliveryItemShowResponseModel } from '../model/v0WebhookDeliveryItemShowResponseModel';

import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from '../model/models';
import { HttpBasicAuth, HttpBearerAuth, ApiKeyAuth, OAuth } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'https://api.bitrise.io/v0.1';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum WebhookDeliveryItemApiApiKeys {
    PersonalAccessToken,
}

export class WebhookDeliveryItemApi {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'PersonalAccessToken': new ApiKeyAuth('header', 'Authorization'),
    }

    protected interceptors: Interceptor[] = [];

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: WebhookDeliveryItemApiApiKeys, value: string) {
        (this.authentications as any)[WebhookDeliveryItemApiApiKeys[key]].apiKey = value;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    /**
     * List all the delivery items of an outgoing webhook of a Bitrise application
     * @summary List the webhook delivery items of an app
     * @param appSlug App slug
     * @param appWebhookSlug App webhook slug
     * @param next Slug of the first delivery item in the response
     * @param limit Max number of elements per page (default: 50)
     */
    public async webhookDeliveryItemList (appSlug: string, appWebhookSlug: string, next?: string, limit?: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: V0WebhookDeliveryItemShowResponseModel;  }> {
        const localVarPath = this.basePath + '/apps/{app-slug}/outgoing-webhooks/{app-webhook-slug}/delivery-items'
            .replace('{' + 'app-slug' + '}', encodeURIComponent(String(appSlug)))
            .replace('{' + 'app-webhook-slug' + '}', encodeURIComponent(String(appWebhookSlug)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'appSlug' is not null or undefined
        if (appSlug === null || appSlug === undefined) {
            throw new Error('Required parameter appSlug was null or undefined when calling webhookDeliveryItemList.');
        }

        // verify required parameter 'appWebhookSlug' is not null or undefined
        if (appWebhookSlug === null || appWebhookSlug === undefined) {
            throw new Error('Required parameter appWebhookSlug was null or undefined when calling webhookDeliveryItemList.');
        }

        if (next !== undefined) {
            localVarQueryParameters['next'] = ObjectSerializer.serialize(next, "string");
        }

        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.PersonalAccessToken.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.PersonalAccessToken.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: V0WebhookDeliveryItemShowResponseModel;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "V0WebhookDeliveryItemShowResponseModel");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Re-deliver the delivery item of a specified webhook of a Bitrise application
     * @summary Re-deliver the webhook delivery items of an app
     * @param appSlug App slug
     * @param appWebhookSlug App webhook slug
     * @param webhookDeliveryItemSlug Webhook delivery item slug
     */
    public async webhookDeliveryItemRedeliver (appSlug: string, appWebhookSlug: string, webhookDeliveryItemSlug: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ServiceStandardErrorRespModel;  }> {
        const localVarPath = this.basePath + '/apps/{app-slug}/outgoing-webhooks/{app-webhook-slug}/delivery-items/{webhook-delivery-item-slug}/redeliver'
            .replace('{' + 'app-slug' + '}', encodeURIComponent(String(appSlug)))
            .replace('{' + 'app-webhook-slug' + '}', encodeURIComponent(String(appWebhookSlug)))
            .replace('{' + 'webhook-delivery-item-slug' + '}', encodeURIComponent(String(webhookDeliveryItemSlug)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'appSlug' is not null or undefined
        if (appSlug === null || appSlug === undefined) {
            throw new Error('Required parameter appSlug was null or undefined when calling webhookDeliveryItemRedeliver.');
        }

        // verify required parameter 'appWebhookSlug' is not null or undefined
        if (appWebhookSlug === null || appWebhookSlug === undefined) {
            throw new Error('Required parameter appWebhookSlug was null or undefined when calling webhookDeliveryItemRedeliver.');
        }

        // verify required parameter 'webhookDeliveryItemSlug' is not null or undefined
        if (webhookDeliveryItemSlug === null || webhookDeliveryItemSlug === undefined) {
            throw new Error('Required parameter webhookDeliveryItemSlug was null or undefined when calling webhookDeliveryItemRedeliver.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.PersonalAccessToken.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.PersonalAccessToken.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ServiceStandardErrorRespModel;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "ServiceStandardErrorRespModel");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Get the specified delivery item of an outgoing webhook of a Bitrise application
     * @summary Get a specific delivery item of a webhook
     * @param appSlug App slug
     * @param appWebhookSlug App webhook slug
     * @param webhookDeliveryItemSlug Webhook delivery item slug
     */
    public async webhookDeliveryItemShow (appSlug: string, appWebhookSlug: string, webhookDeliveryItemSlug: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: V0WebhookDeliveryItemResponseModel;  }> {
        const localVarPath = this.basePath + '/apps/{app-slug}/outgoing-webhooks/{app-webhook-slug}/delivery-items/{webhook-delivery-item-slug}'
            .replace('{' + 'app-slug' + '}', encodeURIComponent(String(appSlug)))
            .replace('{' + 'app-webhook-slug' + '}', encodeURIComponent(String(appWebhookSlug)))
            .replace('{' + 'webhook-delivery-item-slug' + '}', encodeURIComponent(String(webhookDeliveryItemSlug)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'appSlug' is not null or undefined
        if (appSlug === null || appSlug === undefined) {
            throw new Error('Required parameter appSlug was null or undefined when calling webhookDeliveryItemShow.');
        }

        // verify required parameter 'appWebhookSlug' is not null or undefined
        if (appWebhookSlug === null || appWebhookSlug === undefined) {
            throw new Error('Required parameter appWebhookSlug was null or undefined when calling webhookDeliveryItemShow.');
        }

        // verify required parameter 'webhookDeliveryItemSlug' is not null or undefined
        if (webhookDeliveryItemSlug === null || webhookDeliveryItemSlug === undefined) {
            throw new Error('Required parameter webhookDeliveryItemSlug was null or undefined when calling webhookDeliveryItemShow.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.PersonalAccessToken.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.PersonalAccessToken.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: V0WebhookDeliveryItemResponseModel;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "V0WebhookDeliveryItemResponseModel");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
}
