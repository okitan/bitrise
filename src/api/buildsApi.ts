/**
 * Bitrise API
 * Official REST API for Bitrise.io
 *
 * The version of the OpenAPI document: 0.1
 * Contact: letsconnect@bitrise.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import localVarRequest = require('request');
import http = require('http');

/* tslint:disable:no-unused-locals */
import { ServiceStandardErrorRespModel } from '../model/serviceStandardErrorRespModel';
import { V0BuildAbortParams } from '../model/v0BuildAbortParams';
import { V0BuildAbortResponseModel } from '../model/v0BuildAbortResponseModel';
import { V0BuildListAllResponseModel } from '../model/v0BuildListAllResponseModel';
import { V0BuildListResponseModel } from '../model/v0BuildListResponseModel';
import { V0BuildLogInfoResponseModel } from '../model/v0BuildLogInfoResponseModel';
import { V0BuildShowResponseModel } from '../model/v0BuildShowResponseModel';
import { V0BuildTriggerParams } from '../model/v0BuildTriggerParams';
import { V0BuildTriggerRespModel } from '../model/v0BuildTriggerRespModel';
import { V0BuildWorkflowListResponseModel } from '../model/v0BuildWorkflowListResponseModel';

import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from '../model/models';
import { HttpBasicAuth, HttpBearerAuth, ApiKeyAuth, OAuth } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'https://api.bitrise.io/v0.1';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum BuildsApiApiKeys {
    AddonAuthToken,
    PersonalAccessToken,
}

export class BuildsApi {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'AddonAuthToken': new ApiKeyAuth('header', 'Bitrise-Addon-Auth-Token'),
        'PersonalAccessToken': new ApiKeyAuth('header', 'Authorization'),
    }

    protected interceptors: Interceptor[] = [];

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: BuildsApiApiKeys, value: string) {
        (this.authentications as any)[BuildsApiApiKeys[key]].apiKey = value;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    /**
     * Abort a specific build. Set an abort reason with the `abort_reason` parameter. Use the `abort_with_success` parameter to abort a build but still count it as a successful one.
     * @summary Abort a specific build
     * @param appSlug App slug
     * @param buildSlug Build slug
     * @param buildAbortParams Build abort parameters
     */
    public async buildAbort (appSlug: string, buildSlug: string, buildAbortParams: V0BuildAbortParams, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: V0BuildAbortResponseModel;  }> {
        const localVarPath = this.basePath + '/apps/{app-slug}/builds/{build-slug}/abort'
            .replace('{' + 'app-slug' + '}', encodeURIComponent(String(appSlug)))
            .replace('{' + 'build-slug' + '}', encodeURIComponent(String(buildSlug)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'appSlug' is not null or undefined
        if (appSlug === null || appSlug === undefined) {
            throw new Error('Required parameter appSlug was null or undefined when calling buildAbort.');
        }

        // verify required parameter 'buildSlug' is not null or undefined
        if (buildSlug === null || buildSlug === undefined) {
            throw new Error('Required parameter buildSlug was null or undefined when calling buildAbort.');
        }

        // verify required parameter 'buildAbortParams' is not null or undefined
        if (buildAbortParams === null || buildAbortParams === undefined) {
            throw new Error('Required parameter buildAbortParams was null or undefined when calling buildAbort.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(buildAbortParams, "V0BuildAbortParams")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.AddonAuthToken.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.AddonAuthToken.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.PersonalAccessToken.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.PersonalAccessToken.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body: V0BuildAbortResponseModel;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "V0BuildAbortResponseModel");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Get the bitrise.yml file of one of the builds of a given app. This will return the `bitrise.yml` configuration with which the build ran. You can compare it to [the current bitrise.yml configuration](https://api-docs.bitrise.io/#/application/app-config-datastore-show) of the app.
     * @summary Get the bitrise.yml of a build
     * @param appSlug App slug
     * @param buildSlug Build slug
     */
    public async buildBitriseYmlShow (appSlug: string, buildSlug: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: string;  }> {
        const localVarPath = this.basePath + '/apps/{app-slug}/builds/{build-slug}/bitrise.yml'
            .replace('{' + 'app-slug' + '}', encodeURIComponent(String(appSlug)))
            .replace('{' + 'build-slug' + '}', encodeURIComponent(String(buildSlug)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['text/plain'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'appSlug' is not null or undefined
        if (appSlug === null || appSlug === undefined) {
            throw new Error('Required parameter appSlug was null or undefined when calling buildBitriseYmlShow.');
        }

        // verify required parameter 'buildSlug' is not null or undefined
        if (buildSlug === null || buildSlug === undefined) {
            throw new Error('Required parameter buildSlug was null or undefined when calling buildBitriseYmlShow.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.AddonAuthToken.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.AddonAuthToken.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.PersonalAccessToken.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.PersonalAccessToken.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body: string;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "string");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * List all the builds of a specified Bitrise app. Set parameters to filter builds: for example, you can search for builds run with a given workflow or all builds that were triggered by Pull Requests. It returns all the relevant data of the build.
     * @summary List all builds of an app
     * @param appSlug App slug
     * @param sortBy Order of builds: sort them based on when they were created or the time when they were triggered
     * @param branch The branch which was built
     * @param workflow The name of the workflow used for the build
     * @param commitMessage The commit message of the build
     * @param triggerEventType The event that triggered the build (push, pull-request, tag)
     * @param pullRequestId The id of the pull request that triggered the build
     * @param buildNumber The build number
     * @param after List builds run after a given date (Unix Timestamp)
     * @param before List builds run before a given date (Unix Timestamp)
     * @param status The status of the build: not finished (0), successful (1), failed (2), aborted with failure (3), aborted with success (4)
     * @param next Slug of the first build in the response
     * @param limit Max number of elements per page (default: 50)
     */
    public async buildList (appSlug: string, sortBy?: 'running_first' | 'created_at', branch?: string, workflow?: string, commitMessage?: string, triggerEventType?: string, pullRequestId?: number, buildNumber?: number, after?: number, before?: number, status?: number, next?: string, limit?: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: V0BuildListResponseModel;  }> {
        const localVarPath = this.basePath + '/apps/{app-slug}/builds'
            .replace('{' + 'app-slug' + '}', encodeURIComponent(String(appSlug)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'appSlug' is not null or undefined
        if (appSlug === null || appSlug === undefined) {
            throw new Error('Required parameter appSlug was null or undefined when calling buildList.');
        }

        if (sortBy !== undefined) {
            localVarQueryParameters['sort_by'] = ObjectSerializer.serialize(sortBy, "'running_first' | 'created_at'");
        }

        if (branch !== undefined) {
            localVarQueryParameters['branch'] = ObjectSerializer.serialize(branch, "string");
        }

        if (workflow !== undefined) {
            localVarQueryParameters['workflow'] = ObjectSerializer.serialize(workflow, "string");
        }

        if (commitMessage !== undefined) {
            localVarQueryParameters['commit_message'] = ObjectSerializer.serialize(commitMessage, "string");
        }

        if (triggerEventType !== undefined) {
            localVarQueryParameters['trigger_event_type'] = ObjectSerializer.serialize(triggerEventType, "string");
        }

        if (pullRequestId !== undefined) {
            localVarQueryParameters['pull_request_id'] = ObjectSerializer.serialize(pullRequestId, "number");
        }

        if (buildNumber !== undefined) {
            localVarQueryParameters['build_number'] = ObjectSerializer.serialize(buildNumber, "number");
        }

        if (after !== undefined) {
            localVarQueryParameters['after'] = ObjectSerializer.serialize(after, "number");
        }

        if (before !== undefined) {
            localVarQueryParameters['before'] = ObjectSerializer.serialize(before, "number");
        }

        if (status !== undefined) {
            localVarQueryParameters['status'] = ObjectSerializer.serialize(status, "number");
        }

        if (next !== undefined) {
            localVarQueryParameters['next'] = ObjectSerializer.serialize(next, "string");
        }

        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.AddonAuthToken.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.AddonAuthToken.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.PersonalAccessToken.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.PersonalAccessToken.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body: V0BuildListResponseModel;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "V0BuildListResponseModel");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * List all the Bitrise builds that can be accessed with the authenticated account. Filter builds based on their owner, using the owner slug, or the status of the build.
     * @summary List all builds
     * @param ownerSlug The slug of the owner of the app or apps
     * @param isOnHold Indicates whether the build has started yet (true: the build hasn\&#39;t started)
     * @param status The status of the build: not finished (0), successful (1), failed (2), aborted with failure (3), aborted with success (4)
     * @param next Slug of the first build in the response
     * @param limit Max number of elements per page (default: 50)
     */
    public async buildListAll (ownerSlug?: string, isOnHold?: boolean, status?: number, next?: string, limit?: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: V0BuildListAllResponseModel;  }> {
        const localVarPath = this.basePath + '/builds';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        if (ownerSlug !== undefined) {
            localVarQueryParameters['owner_slug'] = ObjectSerializer.serialize(ownerSlug, "string");
        }

        if (isOnHold !== undefined) {
            localVarQueryParameters['is_on_hold'] = ObjectSerializer.serialize(isOnHold, "boolean");
        }

        if (status !== undefined) {
            localVarQueryParameters['status'] = ObjectSerializer.serialize(status, "number");
        }

        if (next !== undefined) {
            localVarQueryParameters['next'] = ObjectSerializer.serialize(next, "string");
        }

        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.PersonalAccessToken.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.PersonalAccessToken.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body: V0BuildListAllResponseModel;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "V0BuildListAllResponseModel");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Get the build log of a specified build of a Bitrise app. You can get the build slug either by calling the [/builds](https://api-docs.bitrise.io/#/builds/build-list) endpoint or by clicking on the build on bitrise.io and copying the slug from the URL.
     * @summary Get the build log of a build
     * @param appSlug App slug
     * @param buildSlug Build slug
     */
    public async buildLog (appSlug: string, buildSlug: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: V0BuildLogInfoResponseModel;  }> {
        const localVarPath = this.basePath + '/apps/{app-slug}/builds/{build-slug}/log'
            .replace('{' + 'app-slug' + '}', encodeURIComponent(String(appSlug)))
            .replace('{' + 'build-slug' + '}', encodeURIComponent(String(buildSlug)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'appSlug' is not null or undefined
        if (appSlug === null || appSlug === undefined) {
            throw new Error('Required parameter appSlug was null or undefined when calling buildLog.');
        }

        // verify required parameter 'buildSlug' is not null or undefined
        if (buildSlug === null || buildSlug === undefined) {
            throw new Error('Required parameter buildSlug was null or undefined when calling buildLog.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.AddonAuthToken.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.AddonAuthToken.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.PersonalAccessToken.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.PersonalAccessToken.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body: V0BuildLogInfoResponseModel;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "V0BuildLogInfoResponseModel");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Get the specified build of a given Bitrise app. You need to provide both an app slug and a build slug. You can get the build slug either by calling the [/builds](https://api-docs.bitrise.io/#/builds/build-list) endpoint or by clicking on the build on bitrise.io and copying the slug from the URL. The endpoint returns all the relevant data of the build.
     * @summary Get a build of a given app
     * @param appSlug App slug
     * @param buildSlug Build slug
     */
    public async buildShow (appSlug: string, buildSlug: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: V0BuildShowResponseModel;  }> {
        const localVarPath = this.basePath + '/apps/{app-slug}/builds/{build-slug}'
            .replace('{' + 'app-slug' + '}', encodeURIComponent(String(appSlug)))
            .replace('{' + 'build-slug' + '}', encodeURIComponent(String(buildSlug)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'appSlug' is not null or undefined
        if (appSlug === null || appSlug === undefined) {
            throw new Error('Required parameter appSlug was null or undefined when calling buildShow.');
        }

        // verify required parameter 'buildSlug' is not null or undefined
        if (buildSlug === null || buildSlug === undefined) {
            throw new Error('Required parameter buildSlug was null or undefined when calling buildShow.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.AddonAuthToken.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.AddonAuthToken.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.PersonalAccessToken.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.PersonalAccessToken.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body: V0BuildShowResponseModel;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "V0BuildShowResponseModel");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Trigger a new build. Specify an app slug and at least one parameter out of three: a git tag or git commit hash, a branch, or a workflow ID. You can also set specific parameters for Pull Request builds and define additional environment variables for your build. [Check out our detailed guide](https://devcenter.bitrise.io/api/build-trigger/).
     * @summary Trigger a new build
     * @param appSlug App slug
     * @param buildParams Build trigger parameters
     */
    public async buildTrigger (appSlug: string, buildParams: V0BuildTriggerParams, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: V0BuildTriggerRespModel;  }> {
        const localVarPath = this.basePath + '/apps/{app-slug}/builds'
            .replace('{' + 'app-slug' + '}', encodeURIComponent(String(appSlug)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'appSlug' is not null or undefined
        if (appSlug === null || appSlug === undefined) {
            throw new Error('Required parameter appSlug was null or undefined when calling buildTrigger.');
        }

        // verify required parameter 'buildParams' is not null or undefined
        if (buildParams === null || buildParams === undefined) {
            throw new Error('Required parameter buildParams was null or undefined when calling buildTrigger.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(buildParams, "V0BuildTriggerParams")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.AddonAuthToken.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.AddonAuthToken.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.PersonalAccessToken.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.PersonalAccessToken.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body: V0BuildTriggerRespModel;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "V0BuildTriggerRespModel");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * List the workflows that were triggered at any time for a given Bitrise app. Note that it might list workflows that are currently not defined in the app\'s `bitrise.yml` configuration - and conversely, workflows that were never triggered will not be listed even if they are defined in the `bitrise.yml` file.
     * @summary List the workflows of an app
     * @param appSlug App slug
     */
    public async buildWorkflowList (appSlug: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: V0BuildWorkflowListResponseModel;  }> {
        const localVarPath = this.basePath + '/apps/{app-slug}/build-workflows'
            .replace('{' + 'app-slug' + '}', encodeURIComponent(String(appSlug)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'appSlug' is not null or undefined
        if (appSlug === null || appSlug === undefined) {
            throw new Error('Required parameter appSlug was null or undefined when calling buildWorkflowList.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.AddonAuthToken.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.AddonAuthToken.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.PersonalAccessToken.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.PersonalAccessToken.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.ClientResponse; body: V0BuildWorkflowListResponseModel;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "V0BuildWorkflowListResponseModel");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
}
